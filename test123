import ccxt
import pandas as pd
import talib
import logging
import asyncio
from datetime import datetime
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
import os
from dotenv import load_dotenv
from functools import wraps

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def safe_telegram_message(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏–∏: {str(e)}")
    return wrapper

class TradingBot:
    def __init__(self):
        self.trading_enabled = False
        self.demo_mode = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.active_positions = {}
        self.demo_positions = {}
        self.demo_balance = {'USDT': float(os.getenv('DEMO_START_BALANCE', 1000))}
        self.peak_balance = self.demo_balance['USDT']
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –±–∏—Ä–∂–∏
        self.exchange = self.init_exchange()
        
        self.bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
        self.min_volume = float(os.getenv('MIN_VOLUME_USDT', 100000))
        self.max_pairs = int(os.getenv('MAX_PAIRS', 30))
        self.risk_percent = float(os.getenv('RISK_PERCENT', 2))
        self.atr_multiplier = float(os.getenv('ATR_MULTIPLIER', 2))
        self.profit_target = float(os.getenv('PROFIT_TARGET', 3))
        self.stop_loss_pct = float(os.getenv('STOP_LOSS_PCT', 2))
        self.commission = float(os.getenv('COMMISSION_PCT', 0.1)) / 100
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.check_environment()

    def init_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        try:
            return ccxt.mexc({
                'apiKey': os.getenv('MEXC_API_KEY'),
                'secret': os.getenv('MEXC_API_SECRET'),
                'enableRateLimit': True,
                'options': {'defaultType': 'spot'}
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {str(e)}")
            raise

    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = ['TELEGRAM_BOT_TOKEN']
        if not self.demo_mode:
            required_vars.extend(['MEXC_API_KEY', 'MEXC_API_SECRET'])
            
        missing = [var for var in required_vars if not os.getenv(var)]
        if missing:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

    async def safe_api_call(self, method, *args, max_retries=3, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                func = getattr(self.exchange, method)
                if asyncio.iscoroutinefunction(func):
                    result = await func(*args, **kwargs)
                else:
                    loop = asyncio.get_event_loop()
                    result = await loop.run_in_executor(None, lambda: func(*args, **kwargs))
                
                if result is None:
                    raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return result
                
            except ccxt.NetworkError as e:
                if attempt == max_retries - 1:
                    logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {method} - {str(e)}")
                    raise
                await asyncio.sleep(2 ** attempt)
                
            except ccxt.ExchangeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏: {method} - {str(e)}")
                raise
                
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {method}: {str(e)}")
                raise

    @safe_telegram_message
    async def send_message(self, chat_id, text, parse_mode='Markdown', reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown
            await self.bot.send_message(
                chat_id=chat_id,
                text=text.replace('*', '').replace('_', '').replace('`', ''),
                reply_markup=reply_markup
            )

    async def scan_markets(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        try:
            markets = await self.safe_api_call('fetch_markets')
            tickers = await self.safe_api_call('fetch_tickers')
            
            suitable_pairs = []
            for symbol, ticker in tickers.items():
                if symbol.endswith('/USDT'):
                    if (ticker['quoteVolume'] > self.min_volume and 
                        ticker['last'] > 0.001 and
                        symbol not in self.active_positions and
                        symbol not in self.demo_positions):
                        suitable_pairs.append({
                            'symbol': symbol,
                            'volume': ticker['quoteVolume'],
                            'price': ticker['last'],
                            'change': ticker['percentage']
                        })
            
            suitable_pairs.sort(key=lambda x: x['volume'], reverse=True)
            return suitable_pairs[:self.max_pairs]
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞: {str(e)}")
            return []

    async def get_historical_data(self, symbol, timeframe='1h', limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = await self.safe_api_call('fetch_ohlcv', symbol, timeframe=timeframe, limit=limit)
            if not data:
                return None
                
            df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df['volume_ma'] = df['volume'].rolling(20).mean()
            return df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None

    def calculate_indicators(self, df):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            df['SMA_20'] = talib.SMA(df['close'], timeperiod=20)
            df['SMA_50'] = talib.SMA(df['close'], timeperiod=50)
            df['RSI'] = talib.RSI(df['close'], timeperiod=14)
            df['MACD'], df['MACD_SIGNAL'], _ = talib.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
            df['ATR'] = talib.ATR(df['high'], df['low'], df['close'], timeperiod=14)
            df['BB_UPPER'], _, df['BB_LOWER'] = talib.BBANDS(df['close'], timeperiod=20)
            return df.iloc[-1].to_dict()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            return None

    def get_rsi_status(self, rsi_value):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π RSI"""
        if rsi_value < 30:
            return "üî¥ –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value < 45:
            return "üü† –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value > 70:
            return "üî¥ –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value > 55:
            return "üü† –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
        return "üü¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

    async def analyze_market(self, symbol):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            df = await self.get_historical_data(symbol)
            if df is None or len(df) < 50:
                return None
                
            indicators = self.calculate_indicators(df)
            if not indicators:
                return None
                
            current_price = indicators['close']
            volume_change = ((indicators['volume'] - indicators['volume_ma']) / indicators['volume_ma']) * 100

            report = (
                f"üìä *{symbol}*\n"
                f"‚îú‚îÄ –¶–µ–Ω–∞: {current_price:.6f} $\n"
                f"‚îú‚îÄ RSI: {indicators['RSI']:.2f} {self.get_rsi_status(indicators['RSI'])}\n"
                f"‚îú‚îÄ –û–±—ä–µ–º: {indicators['volume']:.2f} ({volume_change:+.1f}%)\n"
                f"‚îú‚îÄ –¢—Ä–µ–Ω–¥: {'üìà –ë—ã—á–∏–π' if current_price > indicators['SMA_50'] else 'üìâ –ú–µ–¥–≤–µ–∂–∏–π'}\n"
                f"‚îî‚îÄ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {indicators['ATR']:.6f} (ATR)"
            )

            buy_conditions = (
                (indicators['RSI'] < 35) and
                (indicators['MACD'] > indicators['MACD_SIGNAL'] * 0.98) and
                (current_price > indicators['SMA_50'] * 0.97) and
                (volume_change > 20)
            )

            sell_conditions = (
                (indicators['RSI'] > 70) or
                (current_price > indicators['BB_UPPER'] * 0.98) or
                (current_price <= self.active_positions.get(symbol, {}).get('sl', 0)) or
                (current_price <= self.demo_positions.get(symbol, {}).get('sl', 0))
            )

            if buy_conditions:
                return {
                    'signal': 'BUY',
                    'symbol': symbol,
                    'price': current_price,
                    'tp': current_price * (1 + self.profit_target/100),
                    'sl': current_price * (1 - self.stop_loss_pct/100),
                    'report': report,
                    'reason': "–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É:\n‚Ä¢ RSI –≤ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏\n‚Ä¢ –†–æ—Å—Ç –æ–±—ä–µ–º–∞\n‚Ä¢ MACD –≤–æ—Å—Ö–æ–¥—è—â–∏–π",
                    'atr': indicators['ATR']
                }
            elif sell_conditions and (symbol in self.active_positions or symbol in self.demo_positions):
                return {
                    'signal': 'SELL',
                    'symbol': symbol,
                    'price': current_price,
                    'report': report,
                    'reason': "–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:\n‚Ä¢ RSI –≤ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏\n‚Ä¢ –¶–µ–Ω–∞ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è\n‚Ä¢ –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å"
                }
            else:
                return {
                    'signal': 'HOLD',
                    'symbol': symbol,
                    'report': report,
                    'reason': "–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}: {str(e)}")
            return None

    async def execute_real_trade(self, signal_data, chat_id):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        symbol = signal_data['symbol']
        
        try:
            if signal_data['signal'] == 'BUY':
                balance = await self.safe_api_call('fetch_balance')
                if not balance:
                    await self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
                    return
                    
                usdt_balance = balance['total'].get('USDT', 0)
                risk_amount = usdt_balance * (self.risk_percent / 100)
                amount = round(risk_amount / signal_data['price'], 6)
                
                if amount <= 0:
                    await self.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                    return

                order = await self.safe_api_call(
                    'create_order',
                    symbol=symbol,
                    type='MARKET',
                    side='buy',
                    amount=amount
                )
                
                if order:
                    self.active_positions[symbol] = {
                        'entry_price': float(order['price']),
                        'amount': float(order['amount']),
                        'tp': signal_data['tp'],
                        'sl': signal_data['sl'],
                        'timestamp': datetime.now().isoformat(),
                        'atr': signal_data.get('atr', 0)
                    }
                    message = (
                        f"üöÄ [–†–ï–ê–õ–¨–ù–ê–Ø] –ö–£–ü–õ–ï–ù–û: {symbol}\n"
                        f"üí∞ –¶–µ–Ω–∞: {float(order['price']):.6f} $\n"
                        f"üìä –û–±—ä–µ–º: {float(order['amount']):.6f}\n"
                        f"‚úÖ –¢–ü: {signal_data['tp']:.6f} $\n"
                        f"‚ùå –°–õ: {signal_data['sl']:.6f} $\n"
                        f"{signal_data['reason']}"
                    )
                    await self.send_message(chat_id, message)
            
            elif signal_data['signal'] == 'SELL' and symbol in self.active_positions:
                position = self.active_positions.pop(symbol)
                order = await self.safe_api_call(
                    'create_order',
                    symbol=symbol,
                    type='MARKET',
                    side='sell',
                    amount=position['amount']
                )
                
                if order:
                    profit_pct = (float(order['price']) - position['entry_price']) / position['entry_price'] * 100
                    profit_usdt = (float(order['price']) - position['entry_price']) * position['amount']
                    message = (
                        f"üîª [–†–ï–ê–õ–¨–ù–ê–Ø] –ü–†–û–î–ê–ù–û: {symbol}\n"
                        f"üí∞ –¶–µ–Ω–∞: {float(order['price']):.6f} $\n"
                        f"üìä –û–±—ä–µ–º: {position['amount']:.6f}\n"
                        f"üíµ –ü—Ä–∏–±—ã–ª—å: {profit_pct:.2f}% (${profit_usdt:.2f})\n"
                        f"‚è± –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {(datetime.now() - datetime.fromisoformat(position['timestamp'])).total_seconds()/3600:.1f} —á\n"
                        f"{signal_data['reason']}"
                    )
                    await self.send_message(chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏: {str(e)}")
            await self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")

    async def execute_demo_trade(self, signal_data, chat_id):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏"""
        symbol = signal_data['symbol']
        
        try:
            if signal_data['signal'] == 'BUY':
                risk_amount = self.demo_balance['USDT'] * (self.risk_percent / 100)
                amount = round(risk_amount / signal_data['price'], 6)
                
                if amount <= 0:
                    await self.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
                    return

                commission = amount * signal_data['price'] * self.commission
                total_cost = amount * signal_data['price'] + commission
                
                if total_cost > self.demo_balance['USDT']:
                    await self.send_message(chat_id, f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç USDT —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {self.commission*100}%")
                    return

                self.demo_positions[symbol] = {
                    'entry_price': signal_data['price'],
                    'amount': amount,
                    'tp': signal_data['tp'],
                    'sl': signal_data['sl'],
                    'timestamp': datetime.now().isoformat(),
                    'atr': signal_data.get('atr', 0)
                }
                self.demo_balance['USDT'] -= total_cost
                
                message = (
                    f"üìä [–î–ï–ú–û] –ö–£–ü–õ–ï–ù–û: {symbol}\n"
                    f"üí∞ –¶–µ–Ω–∞: {signal_data['price']:.6f} $\n"
                    f"üìä –û–±—ä–µ–º: {amount:.6f}\n"
                    f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission:.4f} $\n"
                    f"üìâ –û—Å—Ç–∞—Ç–æ–∫: {self.demo_balance['USDT']:.2f} USDT\n"
                    f"‚úÖ –¢–ü: {signal_data['tp']:.6f} $\n"
                    f"‚ùå –°–õ: {signal_data['sl']:.6f} $\n"
                    f"{signal_data['reason']}"
                )
                await self.send_message(chat_id, message)
            
            elif signal_data['signal'] == 'SELL' and symbol in self.demo_positions:
                position = self.demo_positions.pop(symbol)
                
                commission = position['amount'] * signal_data['price'] * self.commission
                total_received = position['amount'] * signal_data['price'] - commission
                
                profit_pct = (signal_data['price'] - position['entry_price']) / position['entry_price'] * 100
                profit_usdt = (signal_data['price'] - position['entry_price']) * position['amount']
                
                self.demo_balance['USDT'] += total_received
                
                message = (
                    f"üìä [–î–ï–ú–û] –ü–†–û–î–ê–ù–û: {symbol}\n"
                    f"üí∞ –¶–µ–Ω–∞: {signal_data['price']:.6f} $\n"
                    f"üìä –û–±—ä–µ–º: {position['amount']:.6f}\n"
                    f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission:.4f} $\n"
                    f"üíµ –ü—Ä–∏–±—ã–ª—å: {profit_pct:.2f}% (${profit_usdt:.2f})\n"
                    f"üìà –û—Å—Ç–∞—Ç–æ–∫: {self.demo_balance['USDT']:.2f} USDT\n"
                    f"‚è± –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {(datetime.now() - datetime.fromisoformat(position['timestamp'])).total_seconds()/3600:.1f} —á\n"
                    f"{signal_data['reason']}"
                )
                await self.send_message(chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏: {str(e)}")
            await self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏: {str(e)}")

    async def execute_trade(self, signal_data, chat_id):
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if not self.trading_enabled and signal_data['signal'] != 'SELL':
                await self.send_message(chat_id, "‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (/trading_on)")
                return
                
            if self.demo_mode:
                await self.execute_demo_trade(signal_data, chat_id)
            else:
                await self.execute_real_trade(signal_data, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
            await self.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot = context.bot_data['trading_bot']
    buttons = [
        [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫", callback_data="scan")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        [InlineKeyboardButton("üíµ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [
            InlineKeyboardButton("‚úÖ –í–∫–ª —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="trading_on"),
            InlineKeyboardButton("‚ùå –í—ã–∫–ª —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="trading_off")
        ],
        [
            InlineKeyboardButton("üü¢ –î–µ–º–æ-—Ä–µ–∂–∏–º", callback_data="demo_on"),
            InlineKeyboardButton("üî¥ –†–µ–∂–∏–º LIVE", callback_data="demo_off")
        ]
    ]
    
    status = "üü¢ –í–ö–õ" if bot.trading_enabled else "üî¥ –í–´–ö–õ"
    demo_status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if bot.demo_mode else "üî¥ –í–´–ö–õ"
    
    message = (
        "ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç MEXC\n"
        f"‚ñ™ –†–µ–∂–∏–º: {'DEMO' if bot.demo_mode else 'LIVE'}\n"
        f"‚ñ™ –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏: {status}\n"
        f"‚ñ™ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(bot.active_positions) + len(bot.demo_positions)}\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/scan - –†—É—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "/positions - –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/trading_on - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/trading_off - –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/demo_on - –í–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º\n"
        "/demo_off - –í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º\n"
        "/demo_reset [—Å—É–º–º–∞] - –°–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å"
    )
    
    try:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(buttons)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")

async def trading_on(update: Update, context: CallbackContext):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    bot = context.bot_data['trading_bot']
    bot.trading_enabled = True
    await update.message.reply_text(
        "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –í–ö–õ–Æ–ß–ï–ù–ê\n\n"
        "–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"
    )

async def trading_off(update: Update, context: CallbackContext):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    bot = context.bot_data['trading_bot']
    bot.trading_enabled = False
    await update.message.reply_text(
        "üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –û–¢–ö–õ–Æ–ß–ï–ù–ê\n\n"
        "–ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç"
    )

async def demo_on(update: Update, context: CallbackContext):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
    bot = context.bot_data['trading_bot']
    bot.demo_mode = True
    await update.message.reply_text(
        f"üü¢ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
        f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {bot.demo_balance['USDT']:.2f} USDT\n"
        f"–ö–æ–º–∏—Å—Å–∏—è: {bot.commission*100}%\n\n"
        "–í—Å–µ —Å–¥–µ–ª–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ!"
    )

async def demo_off(update: Update, context: CallbackContext):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
    bot = context.bot_data['trading_bot']
    bot.demo_mode = False
    await update.message.reply_text(
        "üî¥ –î–µ–º–æ-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
        "–ë–æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"
    )

async def demo_reset(update: Update, context: CallbackContext):
    """–°–±—Ä–æ—Å –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å–∞"""
    bot = context.bot_data['trading_bot']
    try:
        new_balance = float(context.args[0]) if context.args else 1000
        if new_balance <= 0:
            raise ValueError
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /demo_reset [—Å—É–º–º–∞]")
        return
    
    bot.demo_balance = {'USDT': new_balance}
    bot.demo_positions = {}
    await update.message.reply_text(
        f"üîÑ –î–µ–º–æ-–±–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
    )

async def scan_markets(update: Update, context: CallbackContext):
    """–†—É—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
    bot = context.bot_data['trading_bot']
    await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
    pairs = await bot.scan_markets()
    
    if not pairs:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
        
    top_pairs = []
    for pair in pairs[:10]:
        symbol = pair['symbol']
        price = pair['price']
        change = pair['change']
        change_emoji = "üìà" if change >= 0 else "üìâ"
        
        top_pairs.append(f"{symbol.ljust(10)} - {price:.6f}$ {change_emoji} {abs(change):.2f}%")
    
    message = (
        "üìä –¢–æ–ø-10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä\n\n"
        "–ü–∞—Ä–∞        –¶–µ–Ω–∞        –ò–∑–º–µ–Ω–µ–Ω–∏–µ\n"
        f"{chr(10).join(top_pairs)}\n\n"
        f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(pairs)} –ø–∞—Ä"
    )
    
    await update.message.reply_text(message)

async def show_positions(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    bot = context.bot_data['trading_bot']
    if not bot.active_positions and not bot.demo_positions:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        return
        
    positions_text = ["üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", ""]
    
    if bot.demo_mode:
        for symbol, data in bot.demo_positions.items():
            positions_text.extend([
                f"[–î–ï–ú–û] {symbol}",
                f"–í—Ö–æ–¥: {data['entry_price']:.6f} $",
                f"–û–±—ä–µ–º: {data['amount']:.6f}",
                f"–¢–ü: {data['tp']:.6f} $",
                f"–°–õ: {data['sl']:.6f} $",
                f"–û—Ç–∫—Ä—ã—Ç–∞: {datetime.fromisoformat(data['timestamp']).strftime('%d.%m %H:%M')}",
                ""
            ])
    
    if not bot.demo_mode or (bot.demo_mode and bot.active_positions):
        for symbol, data in bot.active_positions.items():
            positions_text.extend([
                f"[LIVE] {symbol}",
                f"–í—Ö–æ–¥: {data['entry_price']:.6f} $",
                f"–û–±—ä–µ–º: {data['amount']:.6f}",
                f"–¢–ü: {data['tp']:.6f} $",
                f"–°–õ: {data['sl']:.6f} $",
                f"–û—Ç–∫—Ä—ã—Ç–∞: {datetime.fromisoformat(data['timestamp']).strftime('%d.%m %H:%M')}",
                ""
            ])
    
    await update.message.reply_text("\n".join(positions_text))

async def show_balance(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
    bot = context.bot_data['trading_bot']
    if bot.demo_mode:
        balance_lines = [
            "üíµ –î–µ–º–æ-–±–∞–ª–∞–Ω—Å",
            f"USDT: {bot.demo_balance['USDT']:.2f}",
            ""
        ]
        if bot.demo_positions:
            balance_lines.append("üìä –ü–æ–∑–∏—Ü–∏–∏ –≤ DEMO")
            for symbol, pos in bot.demo_positions.items():
                balance_lines.append(f"{symbol}: {pos['amount']:.6f} –ø–æ {pos['entry_price']:.6f} $")
    else:
        balance = await bot.safe_api_call('fetch_balance')
        if balance:
            balance_lines = ["üíµ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"]
            for asset, amount in balance['total'].items():
                if amount > 0.01:
                    balance_lines.append(f"{asset}: {amount:.2f}")
            
            if bot.active_positions:
                balance_lines.extend(["", "üìä –ü–æ–∑–∏—Ü–∏–∏ –≤ LIVE"])
                for symbol, pos in bot.active_positions.items():
                    balance_lines.append(f"{symbol}: {pos['amount']:.6f} –ø–æ {pos['entry_price']:.6f} $")
        else:
            balance_lines = ["‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"]
    
    await update.message.reply_text("\n".join(balance_lines))

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    bot = context.bot_data['trading_bot']
    
    try:
        if query.data == "scan":
            await scan_markets(update, context)
        elif query.data == "positions":
            await show_positions(update, context)
        elif query.data == "balance":
            await show_balance(update, context)
        elif query.data == "trading_on":
            await trading_on(update, context)
        elif query.data == "trading_off":
            await trading_off(update, context)
        elif query.data == "demo_on":
            await demo_on(update, context)
        elif query.data == "demo_off":
            await demo_off(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def monitor_markets(context: CallbackContext):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    bot = context.bot_data['trading_bot']
    
    try:
        logger.info("–ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞...")
        pairs = await bot.scan_markets()
        if not pairs:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        logger.info(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(pairs)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        for pair in pairs:
            symbol = pair['symbol']
            try:
                signal = await bot.analyze_market(symbol)
                if not signal:
                    continue
                    
                if signal['signal'] == 'BUY':
                    await bot.execute_trade(signal, os.getenv('TG_CHANNEL_ID'))
                elif signal['signal'] == 'SELL':
                    await bot.execute_trade(signal, os.getenv('TG_CHANNEL_ID'))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã {symbol}: {str(e)}")
                
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
        await bot.send_message(
            os.getenv('TG_ADMIN_ID', os.getenv('TG_CHANNEL_ID')),
            f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}"
        )

async def monitor_risk(context: CallbackContext):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    bot = context.bot_data['trading_bot']
    
    try:
        if bot.demo_mode:
            total_value = bot.demo_balance['USDT']
            for symbol, pos in bot.demo_positions.items():
                ticker = await bot.safe_api_call('fetch_ticker', symbol)
                if ticker:
                    total_value += ticker['last'] * pos['amount']
        else:
            balance = await bot.safe_api_call('fetch_balance')
            if not balance:
                return
                
            total_value = balance['total'].get('USDT', 0)
            for symbol, pos in bot.active_positions.items():
                ticker = await bot.safe_api_call('fetch_ticker', symbol)
                if ticker:
                    total_value += ticker['last'] * pos['amount']
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if not hasattr(bot, 'peak_balance') or bot.peak_balance <= 0:
            bot.peak_balance = total_value if total_value > 0 else 1
        
        if total_value <= 0:
            await bot.send_message(
                os.getenv('TG_CHANNEL_ID'),
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é!"
            )
            return
            
        drawdown = (bot.peak_balance - total_value) / bot.peak_balance * 100
        if drawdown > 10:
            await bot.send_message(
                os.getenv('TG_CHANNEL_ID'),
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ—Å–∞–¥–∫–∞: {drawdown:.1f}%"
            )
            if drawdown > 20:
                bot.trading_enabled = False
                await bot.send_message(
                    os.getenv('TG_CHANNEL_ID'),
                    "üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! –ü—Ä–æ—Å–∞–¥–∫–∞ >20%"
                )
        
        bot.peak_balance = max(bot.peak_balance, total_value)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤: {str(e)}")
        await bot.send_message(
            os.getenv('TG_ADMIN_ID', os.getenv('TG_CHANNEL_ID')),
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤: {str(e)}"
        )

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)
    
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(context.error)}\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot = context.bot_data.get('trading_bot')
    if bot:
        await bot.send_message(
            os.getenv('TG_ADMIN_ID'),
            f"‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{str(context.error)}\n\n"
            f"Update: {update}\n\n"
            f"Traceback:\n{context.error.__traceback__}"
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = TradingBot()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
        app.bot_data['trading_bot'] = bot
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("trading_on", trading_on))
        app.add_handler(CommandHandler("trading_off", trading_off))
        app.add_handler(CommandHandler("demo_on", demo_on))
        app.add_handler(CommandHandler("demo_off", demo_off))
        app.add_handler(CommandHandler("demo_reset", demo_reset))
        app.add_handler(CommandHandler("scan", scan_markets))
        app.add_handler(CommandHandler("positions", show_positions))
        app.add_handler(CommandHandler("balance", show_balance))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_error_handler(error_handler)
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        job_queue = app.job_queue
        if job_queue:
            job_queue.run_repeating(monitor_markets, interval=1800, first=10)
            job_queue.run_repeating(monitor_risk, interval=3600, first=30)
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        app.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
